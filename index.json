[{"content":"\rWho am I? # I\u0026rsquo;m Tzur, a software developer and a hobbyist game developer. My professional experience consists of 9 years of software development, with many side projects and fun ventures I take on from time to time.\nWhat is this blog about? # I love building new things.\nI\u0026rsquo;ll use this platform to show off my various projects and games, and also perhaps document some hardships and other day-to-day programming challenges I\u0026rsquo;ll encounter.\nI\u0026rsquo;m always open to new projects! # Have an interesting project for me to try?\nWant some help going forward with your projects?\nfeel free to contact me on any of the mentioned platforms\n\u0026ldquo;The world always seems brighter when you’ve just made something that wasn’t there before\u0026rdquo; - Neil Gaiman # ","date":"28 October 2023","permalink":"/about/","section":"","summary":"Who am I?","title":"About"},{"content":"Hi! Welcome to my Blog. In this blog, I\u0026rsquo;ll share some cool projects, mini games, and other tech stuff I encounter as a Software Developer.\nDon\u0026rsquo;t forget to follow me on the various platforms!\n","date":"31 July 2023","permalink":"/","section":"","summary":"Hi! Welcome to my Blog.","title":""},{"content":"","date":"31 July 2023","permalink":"/tags/game-development/","section":"Tags","summary":"","title":"Game development"},{"content":"","date":"31 July 2023","permalink":"/posts/","section":"Posts","summary":"","title":"Posts"},{"content":"","date":"31 July 2023","permalink":"/tags/programming/","section":"Tags","summary":"","title":"programming"},{"content":"","date":"31 July 2023","permalink":"/tags/","section":"Tags","summary":"","title":"Tags"},{"content":"\rVisualizing Pathfinding Algorithms using Unity # You can find the original twitter post this is based on here You can find the github project for this here\nI always wanted to compare pathfinding algorithms, and was too busy to find a time. One night I started working on it, and in no time I had a tech demo ready.\nInitial design # My goal was to design a grid, in which I could position a character on any tile, position another character on a different tile, and then see the pathfinding algorithm in action. from the very first to the very last step. But first - some background\nbackground # First, let\u0026rsquo;s remember how DFS, BFS and A* work\nDFS # DFS algorithm starts at the root (top) node of a tree and goes as far as it can down a given branch (path), then backtracks until it finds an unexplored path, and then explores it. The algorithm does this until the entire graph has been explored.\nSimply put, every tile in our grid is a node in the graph. Every node has 8 different other nodes it can explore. The character is at the starting node, so DFS acts accordingly it picks a neighbor node and goes deeper: it keeps going deeper (Hence - depth-first-search) until the target is reached - but the path is very long\nBFS (Dijkstra with weights=1) # BFS algorithm starts at the root (top) node and explores the graph layer by layer, examining all the nodes at the same level before descending further. It uses a queue data structure to maintain the order of exploration, ensuring that nodes are visited in a breadth first manner. here\u0026rsquo;s a useful link on Dijkstra if you want to remember why it\u0026rsquo;s the same as BFS when weights=1\nSimple put, we always visit every neighbor of the node before continuing to the next node.\nThis is how BFS does this. The blue nodes are currently inside the queue, waiting to be explored. and now we explore the outer nodes: And so on: and so on: Until: A* # Similar to BFS, but at any step on the grid, A* calculates not only the length so far by simply scanning the grid (similar to BFS), A* adds another step where it calculates the distance (Manhattan) Straightforward Comparison - No Limitations # As a first comparison, I placed them on an open grid, without any walls. It is noteworthy that although DFS promises to find a path but does not guarantee it will be the shortest, BFS (Dijkstra) guarantees to find the shortest path but does not guarantee the computation time, and A* \u0026ldquo;guarantees\u0026rdquo; (heuristic) to find the shortest path and in the quickest amount of time. How quick? incredibly quick. Here\u0026rsquo;s a video comparison all three. In the left corner you can see which algorithm is currently running.\nWhy does A* performs so much better then the other two? # A* performs much better because of the main difference it has from the other two - it not only calculates the nodes it already knows, it calculates the distance from the final node.\nThis simple heuristic improves the algorithm dramatically in the clean case we just saw, but it can also lead to a worse results in different scenarios.\nAdding A Maze # Then I started complicating things even more. I placed them in a random maze I created, and wanted to see who will win. A* won, but mostly because it can \u0026ldquo;give up\u0026rdquo; on certain paths, where BFS never gives up on any path. Here\u0026rsquo;s another video comparison of all three. In the left corner you can see which algorithm is currently running.\nWhere A* Fails # Although it may appear that I give A* too much credit, there are instances in which it falls short\nThe best example I found was when I placed the end node behind a wall.\nA* performs miserably since the distance calculation throws it off, and it doesn\u0026rsquo;t \u0026ldquo;give up\u0026rdquo; those very close steps it believes that lead him to the his final destination.\nConclusion # Although it seems like A* is the best choice, there are many cases (not just the one I shared) where BFS and even DFS can perform better. When adding weights, the whole story changes, but more on that in a future post.\n","date":"31 July 2023","permalink":"/posts/pathfinding/","section":"Posts","summary":"Visualizing Pathfinding Algorithms using Unity # You can find the original twitter post this is based on here You can find the github project for this here","title":"Visualizing pathfinding Algorithms! BFS, DFS and A*"},{"content":"This was originally published on Medium\nAlso a quick overview in a Tweet\nIn short — when the tickets became available, my phone received this notification:\nThe background story # Several months ago, the local Fantasy \u0026amp; Science Fiction organization invited Brandon Sanderson, who is my favorite Fantasy author of all times, to be the guest of honor at the annual “Icon” festival (a fantasy \u0026amp; Sci-Fi festival)\nAs soon as I heard it, I knew I had to be there for one of his lectures. I’ve read almost every major book he wrote, and his worlds inspired me without end. I actually read all of his major books in several months. A week ago, finally, they released the official schedule for the festival, and in it — Sanderson’s lectures. But, to my surprise, they didn’t release the tickets for sale yet. Instead, the schedule had a “Closed sale, tickets will be available in a few days” headline. Since I’m familiar with the regular lecture halls from earlier years, I knew that they are pretty small, and if I want to get a ticket to one of his lectures, I would have to be pretty quick. As the word spread on social media, and talks over the Sci-Fi and Fantasy groups intensified, I felt that the chances of getting a ticket were going down by the minute. I couldn’t let this opportunity escape.\nI shared my dread with a friend, who offered me a cool idea (I’m not even sure he was 100% serious) He said — “Hey, why don’t you write something to help you? You only need to see when the tickets are available and notify yourself. It can’t be that hard.”\nAnd he was right. It wasn’t hard.\nThe design # So I sat down to write a python script, that notifies me when tickets are available. The basic idea was this: As soon as the script finds a change in the ticket site, it needs to send a push notification directly to my phone. That was the only way I knew I would see the tickets in time since my phone was always with me, and so the chances of me getting notified are pretty high. I also decided that a check every 10 minutes should be enough, I thought to myself — the tickets won’t be sold out that quickly (spoiler: I was only half correct, one of the workshops was sold out in two minutes)\nThe code itself is pretty straightforward, but I thought I should share it, in case there are other programmers out there that have no idea how easy it is to do something like this and make their lives a bit easier.\nPreparations # Programming language: Python Requirements: Only one package from PyPI— “notify-run” It’s a great python package, you can find its Github page here. You can get notify-run by going to your python environment (I’m assuming you’re using virtual-env) and run:\npip install notify-run When it’s done, you’ll have to register a channel. This channel will allow your code to send notifications directly to your phone, via your phone’s web browser. So, after installing notify-run, you need to run:\nnotify-run register Windows users: If you’ve used a virtual-env to install notify-run, you can find your notify-run executable at the venv “Scripts” folder (venv\\Scripts), along with ‘pip’, ‘python’, and ‘easy_install’.\nThis cool package creates a channel for you. After you run that command, you’ll get a QR code and a link to connect your phone to the newly created channel\nYour local environment is ready. Now you only need to write the code.\nThe code # The code itself, as I said, is pretty simple. I was not too worried about performance since I decided that it should run every 10 minutes. The site itself was static, no code was generated after the request was made, so it made it even easier. My only real challenge was getting myself notified, the rest was pretty easy. I’ll present the code and then explain it.\nfrom urllib.request import urlopen from notify_run import Notify import re from time import sleep def notify_me(url): # The notify-run object notify = Notify() data = (urlopen(url)).readlines()\n# A simple counter, to notify every 2 hours it's still alive count = 0 # A first message, to check for the health of the channel. notify.send('Starting notification process') found = False # try/finally so I would get notified if the script stopped # for any reason. try: # A simple while, with a 2 hour health check. while not found: found = True for line in data: x = re.search('Closed sale', str(line)) if x: found = False break sleep(600) count += 600 if count \u0026gt;= 7200: # Notify me that the code is still running notify.send('Alive, waiting for a change in the site.') count = 0 data = (urlopen(url)).readlines() finally: # If we got here,I should buy the tickets, # or something went wrong. Either way, I should check notify.send('The site has changed! check it!') The function has 2 parts — The first one, is a preparation part, the second is the main loop, which notifies its health status every 2 hours. The first line is simple — define the notify object. This object allows us the communicate with the notify-run channel we registered to earlier. Then, we use the urllib.requests package to open the page and get it. We then read the lines of that object, and insert them into data. The first interesting call is the notify.send(\u0026lsquo;Starting\u0026rsquo;) call. Here, we send the first notification to the channel.\nIn this part, your phone should look like this:\nThe next part is a simple while loop. Every 10 minutes (600 seconds), download the site, traverse it using the regular expression package (re), and check for the exact words ‘Closed sale’. If you find them — it means the site did not change yet, so no tickets are available. So every 2 hours, you would see this notification:\nBut if ‘re’ can’t match those words — This means the site has changed, and the while loop should now break, and you would see this notification on your phone:\nThat’s it! you’ve done it. Now you can create your own scripts to help automate ticket buying for shows and movies you want.\nIf you have any questions, feel free to send me a message!\n","date":"14 July 2023","permalink":"/posts/tickets_post/","section":"Posts","summary":"This was originally published on Medium","title":"How I got tickets to a quickly sold out Brandon Sanderson lecture with 40 lines of Python code"},{"content":"","date":"14 July 2023","permalink":"/tags/python/","section":"Tags","summary":"","title":"Python"},{"content":"Hi everyone! As this is my first post in this new blog, I wanted to write about a cool project that combined two separate areas I love - AI \u0026amp; Game development. So, without further ado -\nHow did I build an AI that can play 2D games? # I attempt to explore every aspect of development as a software developer, but my passion has always been game development. I created numerous tiny tech demos and multiple mini-games, one of which included a proposal to my wife, but more on that later.\nI studied machine learning two years ago and became interested in neural networks after reading an interesting book. I will do my best to provide a brief overview of those, but for anyone who would like to read more, I will provide links. The primary objective is to develop a 2D, simple Mario-style game in which an AI player can navigate the level from beginning to end. Background # What are Neural Networks? # if you know the basics of Neural Networks, just skip to the next section\nNeural Networks are computing systems vaguely inspired by the biological neural networks that constitute our brains. Such systems \u0026ldquo;learn\u0026rdquo; to perform tasks by considering examples, generally without being programmed with task-specific rules. For example, in image recognition(Image classifier), they might learn to identify images that contain cats by analyzing example images that have been manually labeled as \u0026ldquo;cat\u0026rdquo; or \u0026ldquo;no cat\u0026rdquo; and using the results to identify cats in other images\nIt is a collection of connected units (nodes) called artificial neurons, which loosely model the neurons in a biological brain. Each connection, like the synapse in a biological brain, can transmit a “signal” to other neurons. An artificial neuron that receives a signal, processes it, and can signal neurons connected to it.\nEach synapse (connection) has a weight, and that weight represents its relative importance. Some neurons have a Bias value, which is a constant value we add to signals passing through it. The value of each neuron is updated using something called an Activation Function. The Activation function receives inputs and weights (the Neuron\u0026rsquo;s data) and passes on a value to the next neuron until it arrives at the last layer (output) and passes the final result.\nIf you want more information, I highly recommend checking out this youtube video, it has a very clear explanation on the complete flow.\nSurvival of the fittest # a term used to explain the mechanism of Natural Selection that dates back to Darwinian evolutionary theory. One important mechanism of evolution is natural selection, which is the process by which organisms with advantageous features have a higher chance of procreating and flourishing. In other words, the organisms with the highest Fitness have a higher probability of thriving.\nlet's consider a population of mice that moved into a new area where the rocks are very dark. Due to natural genetic variation, some mice have black fur, while others have tan fur. Tan mice are more visible to predatory birds, than black mice. some mice were eaten by birds, this occurs because Tan mice are more visible to predatory birds, thus, tan mice are eaten at a higher rate than black mice. This means only the surviving mice reach reproductive age have offspring. Because black mice had a higher chance of leaving an offspring than Tan mice, the next generation contains a higher number of black mice than the previous generation. Combining evolution with Neural Networks # There are many methods for training a neural network, but I chose to use evolution and Survival of the Fittest. Essentially, until our neural network reaches its maximum potential, we will need to \u0026ldquo;evolve\u0026rdquo; it by creating successive generations and choosing the most fitted of them.\nThe Process - Combine Neural Network with Evolution # Step I Create Neural Networks\rcreate several ANNs with weights and biases, and choose their input at random, letting them compute whatever result. Step II Compute and Rank them\rStep 2: After they were all done computing their result, rank them, using a fitness function. The fitness dictated who was the “best” ANN out of all of those ANNs. Step III Choose Best, Delete and Copy\rChoose the one with the best Fitness. Delete 50% of the worst Neural Networks (lowest scores), and copy the best in their place (with a twist) Here\u0026rsquo;s the concept graphically\nStep 1 - Create Neural Networks # Step 2 - Compute and Rank them # Step 3 - Choose Best, Delete and Copy # Best is 95, so we delete the lowest scores and replace them The \u0026ldquo;twist\u0026rdquo; I added # With a 10% chance, we mutated something in each of the new networks. Meaning, that for each new network we copy, there is a slight chance of it being a bit different from the original network it was copied from. We gave them new (random) input, and again chose the best.\nThis process continues until we reach the most satisfying score/state. At the end, we simply take the best Neural Network.\nSo, what’s all that has to do with an AI that knows how to play games? # Follow part II of this to find out!\n","date":"1 July 2023","permalink":"/posts/first-post/","section":"Posts","summary":"Hi everyone!","title":"Building An AI That Can Play Games - Part I"},{"content":"","date":"1 July 2023","permalink":"/tags/neural-networks/","section":"Tags","summary":"","title":"Neural Networks"},{"content":"","date":"1 January 0001","permalink":"/authors/","section":"Authors","summary":"","title":"Authors"},{"content":"","date":"1 January 0001","permalink":"/categories/","section":"Categories","summary":"","title":"Categories"},{"content":"","date":"1 January 0001","permalink":"/series/","section":"Series","summary":"","title":"Series"}]